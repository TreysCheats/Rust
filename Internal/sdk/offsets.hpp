#pragma once

/*

oBasePlayer::oMountable
	- open cheat engine and mount something, should be a pointer that gets created
	- can check class name at 0x0 -> 0x10 -> 0x0

oBasePlayer::oModelState
	- search for "crawling = 4096" in dump.cs
	- search for the class name in here

oModelState::oFlags
	- go to cheat engine and go to the model state. alt look and see what becomes 16384

*/

namespace oMain {
	inline uint64_t oBaseNetworkable = 0xd384608; // BaseNetworkable.%67c2ec7a6ddc8fa488fdf131256030dfda965890
	inline uint64_t oMainCamera = 0xd3e6808;
	inline uint64_t oGraphics = 0xd4109a0; // %6610a6665ffe469e669be91bfbc291aafd52f45d.%30c5351ae7f93178da05aba7c004cfd8aef339ad
	inline uint64_t oTODSky = 0xd455920; // TOD_Sky.%0c0e8607ee23a7d6852d807e0d1ca02442d4b1f0
	inline uint64_t oPlayerEyes = 0xd463498; // PlayerEyes.%d127353bc122e95ba2527e088d90eb3cd7abeacf
}
namespace oBaseEntity {
	inline uint64_t o_ef7897639dac9997b2f1f8ef5a5910f1f990c106 = 0x80; // List<%8713cba7c26f49b44ca61fe18641f4b160d3ebc8>
	inline uint64_t o_978b73ae733d33104528f808a3a81daa7a57fe63 = 0x88; // EntityComponentBase[]
	inline uint64_t o_58d9ee68e47580e2e9edf2778d82f125a71f3648 = 0x90; // float
	inline uint64_t o_763d0071a03f9787eaec1b502cc4548f63e93a91 = 0x98; // BaseEntity
	inline uint64_t oBounds = 0xA0; // Bounds
	inline uint64_t oImpactEffect = 0xB8; // GameObjectRef
	inline uint64_t oEnableSaving = 0xC0; // bool
	inline uint64_t oSyncPosition = 0xC1; // bool
	inline uint64_t oModel = 0xC8; // Model
	inline uint64_t oFlags = 0xD0; // BaseEntity.Flags
	inline uint64_t o_6f614ba5079f065f8ffdbf3fde4d6a605d51532f = 0xD4; // uint
	inline uint64_t o_771829528cccc0cb25329944a8ad52ae8d3d09d5 = 0xD8; // ulong
	inline uint64_t o_9e2e6822a26ac648f4e5360d0f7474b8ff099430 = 0xE0; // ItemSkin
	inline uint64_t oHasBrain = 0xE8; // bool
	inline uint64_t o_1803a0f04759faac8ec22a51851ac00afe49ba99 = 0xEC; // float
	inline uint64_t o_450424e13ddd4c43fac47b94b838ac3fa4498557 = 0xF0; // bool
	inline uint64_t o_8437594f83047b40d0f587c9d48e77545744e20f = 0xF8; // %6aac5b838051de35b608810615d67ccf0e60dad2[]
	inline uint64_t o_104b19315f5445a93cae805a5f5544c2c1587568 = 0x100; // ulong
	inline uint64_t o_7d1d97674a0f110c6f0abbbc0d78e88f90d1554b = 0x108; // uint
	inline uint64_t o_eeb532b5c83a9e8eb77de961bca178e4d6952c3e = 0x110; // List<TriggerBase>
	inline uint64_t o_e5173880aac22f007c45cc4f5518179d58735735 = 0x118; // bool
	inline uint64_t o_8d3bfc98cbfd63a73db5275f346bd25fe47023ab = 0x120; // string
	inline uint64_t o_a47e8f55094264336ba91edad464311c4aa4cd41 = 0x128; // Ragdoll
	inline uint64_t o_0d8b1de11e2735b113aa3962e6f2da3f1f3cd580 = 0x130; // Action
	inline uint64_t o_7c717ebb89012bd165e65579d852b2c7306ebcf7 = 0x138; // Action
	inline uint64_t o_9ab0a14281b2f3386eb5ea40593b1e6052aba925 = 0x140; // Action
	inline uint64_t o_7f04dc8d5f1236adf4d8b6aeb7629cafb2108a2a = 0x148; // List<BaseEntity.%6182b00f0f64524ad804fb0d5875870936805ecd>
	inline uint64_t o_aa5885b846c9cb4e16452c71c38d6e1c338a7eed = 0x150; // %d28290ef96d2ce902d5324f6fc61b2cad687b29d
	inline uint64_t o_c8f9c535ae09e49696cc744d09b8aa0f9a6353ab = 0x158; // List<%31d1468320d88542d3002aa99aa11698fe2f16a2>
	inline uint64_t o_caceffe0aa6f42d5b029c6ca862e70d44dfb3b72 = 0x160; // bool
	inline uint64_t o_20a26d8ef431113e248ac74121342e8c60825464 = 0x161; // bool
	inline uint64_t o_b3e8c122e8d6b9a867cc1113eb7c1d518bdb4813 = 0x162; // bool
	inline uint64_t o_862d1fe67a577f2523d4c6a134cb9bd5cfdd44f4 = 0x168; // %e0d66a8da3d18acc385c6e683bd69be3de014687
	inline uint64_t o_546b813da81b13829f9a189b1e699fadcfb703d2 = 0x188; // float
}
namespace oBaseCombatEntity {
	inline uint64_t o_c3fd310f7abb2349604154287dc6f8e799e95993 = 0x190; // Action
	inline uint64_t o_b87cb1675fd1fd99b97b37f8293904a3430099c1 = 0x198; // Action<BasePlayer>
	inline uint64_t oSkeletonProperties = 0x1A0; // SkeletonProperties
	inline uint64_t oBaseProtection = 0x1A8; // ProtectionProperties
	inline uint64_t oStartHealth = 0x1B0; // float
	inline uint64_t oPickup = 0x1B8; // BaseCombatEntity.Pickup
	inline uint64_t oRepair = 0x1E0; // BaseCombatEntity.Repair
	inline uint64_t oShowHealthInfo = 0x210; // bool
	inline uint64_t oLifestate = 0x214; // BaseCombatEntity.LifeState
	inline uint64_t oSendsHitNotification = 0x218; // bool
	inline uint64_t oSendsMeleeHitNotification = 0x219; // bool
	inline uint64_t oMarkAttackerHostile = 0x21A; // bool
	inline uint64_t o_c520b06f2e1551d2139698776cd060a0d5ecb940 = 0x21C; // float
	inline uint64_t o_1d8fc40beecf866a63057f7c64b0601c4222140b = 0x220; // float
	inline uint64_t oFaction = 0x224; // BaseCombatEntity.Faction
	inline uint64_t o_173fe5ab50e0b3970af8e9719b3f1dc3aa79a842 = 0x228; // float
	inline uint64_t o_f519378b2625f99ed9f655fdd068340582f14460 = 0x22C; // int
}
namespace oRecoilProperties {
	inline uint64_t oRecoilYawMin = 0x18; // float
	inline uint64_t oRecoilYawMax = 0x1C; // float
	inline uint64_t oRecoilPitchMin = 0x20; // float
	inline uint64_t oRecoilPitchMax = 0x24; // float
	inline uint64_t oTimeToTakeMin = 0x28; // float
	inline uint64_t oTimeToTakeMax = 0x2C; // float
	inline uint64_t oADSScale = 0x30; // float
	inline uint64_t oMovementPenalty = 0x34; // float
	inline uint64_t oClampPitch = 0x38; // float
	inline uint64_t oPitchCurve = 0x40; // AnimationCurve
	inline uint64_t oYawCurve = 0x48; // AnimationCurve
	inline uint64_t oUseCurves = 0x50; // bool
	inline uint64_t oCurvesAsScalar = 0x51; // bool
	inline uint64_t oShotsUntilMax = 0x54; // int
	inline uint64_t oMaxRecoilRadius = 0x58; // float
	inline uint64_t oOverrideAimconeWithCurve = 0x5C; // bool
	inline uint64_t oAimconeCurveScale = 0x60; // float
	inline uint64_t oAimconeCurve = 0x68; // AnimationCurve
	inline uint64_t oAimconeProbabilityCurve = 0x70; // AnimationCurve
	inline uint64_t oAmmoAimconeScaleMultiProjectile = 0x78; // float
	inline uint64_t oAmmoAimconeScaleSingleProjectile = 0x7C; // float
	inline uint64_t oNewRecoilOverride = 0x80; // RecoilProperties
}
namespace oBasePlayer {
	inline uint64_t o_d6bca9077928c54f51fffeefd2a6eee35347f1a5 = 0x230; // string
	inline uint64_t o_d46c4b4a6ce4b478812076a17f10da4d37b6e12e = 0x238; // Action<BasePlayer>
	inline uint64_t o_68bf0b61adf254cbe4a48cb414754581a485e4e4 = 0x240; // List<%114a8054ed15210bf84551cc650c4a4185e62087>
	inline uint64_t o_330561bd6b79ef7812675fc1615bf05453b69102 = 0x248; // BaseEntity
	inline uint64_t o_b07a7e47bab7bdb21001964884cf5cb28444f167 = 0x250; // PlayerVoiceSpeaker
	inline uint64_t o_c621da8238b1e1ea4c25aad910629839cde4b44f = 0x258; // PlayerMetabolism
	inline uint64_t o_64a772a0032894b64a5486e5270302ab7ac751ba = 0x260; // Action<BasePlayer>
	inline uint64_t o_d032427537e0b02d7d5cff93ef4ca3e37bbe2d7a = 0x268; // HeldEntity
	inline uint64_t o_91d35aa355a8d30050082d750cbfec1e28c1dcc5 = 0x270; // %ca2ac0990333ccfa70d3068f4ae7e23ad39d071b
	inline uint64_t o_a05a43c5b2b8a269db5a1b85577014f3fd733293 = 0x278; // Action<BasePlayer>
	inline uint64_t o_3714ce8785f57c8f91ba5fd28b27cfcebd032bac = 0x280; // BaseCollision
	inline uint64_t o_03d355c40f7da89f877230fffc916b7883bd3946 = 0x288; // BasePlayer.%ccf987268b34d0036c7e436909bbcd222406e01b<CapsuleCollider>
	inline uint64_t oDisplayName = 0x290; // string
	inline uint64_t o_023ffac2842927fdfe793057c598772358cc6b9a = 0x298; // %d26f1dd66d7b09ba9685e796860d94efbc744d63<ulong>
	inline uint64_t o_d7f3998e1a06f21e19ef462e042ef3d76b710b74 = 0x2A0; // GameObject
	inline uint64_t o_c3dbb2114affb2d297826126bc0452397089ee31 = 0x2A8; // Rigidbody
	inline uint64_t o_3c7de558e8cda8c19e0b3c15e3197144f02ba4fd = 0x2B0; // long
	inline uint64_t oInventory = 0x2B8; // BasePlayer.%ccf987268b34d0036c7e436909bbcd222406e01b<PlayerInventory>
	inline uint64_t o_6d76a5d7271c50b51997f5a0dc58e83aa72eeece = 0x2C0; // bool
	inline uint64_t o_165890ae97a715e60d594e7b7bec320c231782da = 0x2C1; // bool
	inline uint64_t o_5b2c7f0b15388d7ae40bfd915bdff2679c5c62c8 = 0x2C8; // PlayerBlueprints
	inline uint64_t o_dc9d258502be6ed111f0b2b4bda3bea0b46085fc = 0x2D0; // Collider
	inline uint64_t o_b757c897679ae63d498af293dcf9be5f1a8acdac = 0x2D8; // Action<BasePlayer>
	inline uint64_t o_5d2a36b118b3303dbc51d9ff3f95851a91707636 = 0x2E0; // Action<BasePlayer>
	inline uint64_t o_76036bbdb606af9cd83fba6bef2128772d45196e = 0x2E8; // Action<BasePlayer>
	inline uint64_t o_264c9a5b70bafcc25c0ba7def5a24103fd03591d = 0x2F0; // int
	inline uint64_t o_3769af22e2cbfd34e0e465a08798a27ff5ca13eb = 0x2F4; // int
	inline uint64_t o_2df04850f3441940c034fae41b744d5671fe4bfc = 0x2F8; // uint
	inline uint64_t o_9a2442d107279e6748cdcccf4438aebf06ae6fc6 = 0x300; // %f0009e58abadc5f4bd97138e74ee799bfd6e39d2
	inline uint64_t o_d377d7c1d49e1ace6470972561d0ec50462bc1b1 = 0x308; // Collider
	inline uint64_t o_1c920bd19b54b27144cbdd4160259749172980c4 = 0x310; // %114a8054ed15210bf84551cc650c4a4185e62087
	inline uint64_t o_b2f7bceb54ccbe2473cdb4bb113e1ac1032f0c9c = 0x318; // Vector3
	inline uint64_t o_c9bad49a8cb24f77be3ac3325944e03347730896 = 0x324; // float
	inline uint64_t o_56e169e96403fc25195a51ab00826b2c9c47ea42 = 0x328; // bool
	inline uint64_t o_eb6c86e174fe6082e7978777a57a651e3b7234b9 = 0x329; // bool
	inline uint64_t o_05c7c2dc5252130181f824e8ca850d5ca1c2006a = 0x32A; // bool
	inline uint64_t o_a7f18ab6a9bf58ea0a0de006f90d3ee80d0ddd35 = 0x32B; // bool
	inline uint64_t o_44464a85db93c07a9a95146cb96b035cf8fb32cc = 0x32C; // bool
	inline uint64_t o_64254ce7500f5995c3eedfd979c3af729bea6709 = 0x32D; // bool
	inline uint64_t o_221ac804f61320266e762b35e596bb871af0ee70 = 0x330; // uint
	inline uint64_t o_a217787bb071f262892dfc727327f22a43e93f9b = 0x334; // %0c87048e75a57ffb47683e511abb5fbece900915
	inline uint64_t oCameraMode1 = 0x338; // BasePlayer.CameraMode
	inline uint64_t oCameraMode2 = 0x33C; // BasePlayer.CameraMode
	inline uint64_t o_8d31fe8069a8a2113650cbf59db42151623bab37 = 0x340; // Vector3
	inline uint64_t o_5557dfd695e6ce61e54fe151569c816400d79abe = 0x34C; // Vector3
	inline uint64_t o_d52a857a3b656f65675c3171a134392c7f7b010b = 0x358; // bool
	inline uint64_t oGestureViewModel = 0x360; // ViewModel
	inline uint64_t o_f8a524a03d256184a5b19cba9bcdc6662fc5b52e = 0x368; // Action
	inline uint64_t o_157681ffdbaafa7a5255742877d6a2501ad733aa = 0x370; // float
	inline uint64_t o_76a591211f6fb52e12f55d9424fd343fb5ff5a9e = 0x374; // %0c87048e75a57ffb47683e511abb5fbece900915
	inline uint64_t o_1ce1e11d856eca8d528fcb938ffbbec0b5713706 = 0x378; // %cd098ad7d7ff27d937fe125686e634bc4245795e
	inline uint64_t o_c19c0cdb67e7e3a8def6d1b98af16c955f52ffa8 = 0x37C; // float
	inline uint64_t o_f91aa89eb608130699657ad985c1a17dfcda5a9e = 0x380; // float
	inline uint64_t o_555ebdfb9da761ca13c658414589505c6d02417f = 0x384; // float
	inline uint64_t o_f44daca1b9ff1c27c63404f19bb148ec682fbb29 = 0x388; // Action<BasePlayer>
	inline uint64_t o_eacb3590238fadf79f1dc13e14aff62b10db7a2b = 0x390; // Vector3
	inline uint64_t o_0323e91de5ffc51112354a3828e033953edcf487 = 0x3A0; // PlayerModifiers
	inline uint64_t o_e678100c67ee9c9456e7eac10010054b52bb7862 = 0x3A8; // Action<BasePlayer>
	inline uint64_t o_300da81914b8387a5d068091032d9015f85df605 = 0x3B0; // bool
	inline uint64_t o_1475956d1a40971a3ce10b3f615784f9f52dfdb1 = 0x3B8; // Queue<string>
	inline uint64_t o_c71fa7d76d9676bbaf6012afff3ebcddc025c54d = 0x3C0; // string
	inline uint64_t oGestureList = 0x3C8; // GestureCollection
	inline uint64_t o_524558a7f539a2c81139b89d1f5c9e1bbba9e54b = 0x3D0; // %d7e7e05bea6293b1218f0b2c3a1435f1bb320d2c
	inline uint64_t o_0100112f3beaba5e0d9191517643cc34b02ab8a7 = 0x3D4; // %0c87048e75a57ffb47683e511abb5fbece900915
	inline uint64_t oBaseMovement = 0x3E0; // BaseMovement
	inline uint64_t o_7dc656eafd46a3225beed5a94edc30581a22b26b = 0x3E8; // float
	inline uint64_t o_05fd59bc6d642e3c9203d2501872b41d1d70a8f0 = 0x3EC; // float
	inline uint64_t oCurrentTeam = 0x3F0; // ulong
	inline uint64_t o_a6fd06eb017ea2133220b7c1f29e40fab4ae1d14 = 0x3F8; // List<%114a8054ed15210bf84551cc650c4a4185e62087>
	inline uint64_t o_cb7863a135ebae52a588f403d4cb1e82824906c3 = 0x400; // GestureConfig
	inline uint64_t o_01692ecac9fb87d7b2224da069871ecc5c9c62b9 = 0x408; // float
	inline uint64_t o_45d43e23527563a1ed05005b80f44daafbe77e0b = 0x410; // ulong
	inline uint64_t o_b11e68bdf4df5e0d17b0732c960a69b38f7f164c = 0x418; // int
	inline uint64_t o_4338f8d4b712215f3869dbc89c2289f1aacb71c8 = 0x420; // Action
	inline uint64_t o_ca54c0023ed6fdd59d9d4c659290cdd86c52e574 = 0x428; // BuildingPrivlidge
	inline uint64_t oActiveItemID = 0x430; // BasePlayer.%53f959bd39f4d576efce5e364d70cdd24c474f6e<%025a2dfbcddd49bce67210934b803f4d39f1a090>
	inline uint64_t o_dc658b96e51d9f555d1e32ca38545cdd95acc10b = 0x440; // PhoneController
	inline uint64_t oModelState = 0x448; // %4684515a08a1360e71deb1a53cb143e65a5a8ec5
	inline uint64_t o_70843db7814a7e28f26e6ce96602a471e5b8decc = 0x450; // bool
	inline uint64_t oMissions = 0x458; // List<BaseMission.%1afc8137b08b2bfc13fcc1503799f7c71968c96d>
	inline uint64_t o_676c7db99944ff67e867256371779aa2e3400e17 = 0x460; // int
	inline uint64_t o_9cc0f51b5da999ac68c729291d768b75c0bc6023 = 0x468; // Action<BasePlayer>
	inline uint64_t oMountable = 0x470; // %6aac5b838051de35b608810615d67ccf0e60dad2
	inline uint64_t o_ef11a5f0de87856c011bcaa34819f1ee37009f81 = 0x480; // float
	inline uint64_t o_1a9271d0127421c40bd35729bb2ef63a747f35cd = 0x484; // bool
	inline uint64_t oPetEntity = 0x488; // BaseEntity
	inline uint64_t o_b1c9c5f9470c48185f10b34e01ab27fd7eda336d = 0x490; // float
	inline uint64_t o_d9a677e4bb4dbba9013ec520988cc90eb2d8be57 = 0x494; // uint
	inline uint64_t o_e813b3c8ceb61fc4a587ba5fe2ebb88c873f56c1 = 0x498; // %b5cdf617a710a9301118c0e6b03f039209c8cf3c
	inline uint64_t o_b14fcebddd0e01f57123d71d359ac0067b38de34 = 0x4A0; // string
	inline uint64_t o_ba38c12dd5312ac135c2a48ece630191875a6cda = 0x4A8; // bool
	inline uint64_t o_bdf65ff18609ff30ccdde35d0ef1680222f150f6 = 0x4AC; // %0c87048e75a57ffb47683e511abb5fbece900915
	inline uint64_t o_60fcb0d752a23b1156ec5300f72edb5c21ce7b3b = 0x4B0; // float
	inline uint64_t oEyes = 0x4B8; // BasePlayer.%ccf987268b34d0036c7e436909bbcd222406e01b<PlayerEyes>
	inline uint64_t o_6d07494a663dd4a76b664b487d05a5e77bebcefd = 0x4C0; // float
	inline uint64_t o_8e5324f42f1b589b69488cccab70c220b9f57497 = 0x4C4; // bool
	inline uint64_t o_3097afb3ba31a079504372dbfcf74ca40ff95c38 = 0x4C8; // float
	inline uint64_t o_a408f29b03c2c2f26942672f1f87277b28015ca8 = 0x4CC; // bool
	inline uint64_t o_afcaa2474b3f9793bc492100823b68f78017b5f1 = 0x4D0; // Action<BasePlayer>
	inline uint64_t o_154f0ad4905bb0943cf05ace9f38c7a5bd6c397a = 0x4D8; // float
	inline uint64_t o_58a1dad119ed9a142fe947175e77553047c8c245 = 0x4DC; // int
	inline uint64_t o_b2c3af2a197faddb9a98c55d95e2a72d482234f6 = 0x4E0; // %0c87048e75a57ffb47683e511abb5fbece900915
	inline uint64_t o_be407c8f404cc561ee8fd6c518bcd59671927911 = 0x4E4; // float
	inline uint64_t o_46efdffe59dcf8c272ebd7ed11eca322f881b31a = 0x4E8; // float
	inline uint64_t o_dedf94929fc377ad75060a89630f8dc5483feb26 = 0x4EC; // BasePlayer.%53f959bd39f4d576efce5e364d70cdd24c474f6e<float>
	inline uint64_t o_4d8e1fda8a46d3639541a0221a4fecc80b2fae7c = 0x4F8; // Action
	inline uint64_t o_358134b9e794293f79336fd88901b851a9ad7389 = 0x500; // BaseEntity
	inline uint64_t o_1cc4a6ba51bd9872dbfe1b1e0b1681ce5f983e4c = 0x508; // BasePlayer.TutorialItemAllowance
	inline uint64_t o_fc0a12a06cadb028c51b07d4ce76f52b9e2e4a71 = 0x50C; // float
	inline uint64_t o_46fe693b1dd7f8fb400fba37fcb702bb24630f29 = 0x510; // float
	inline uint64_t o_67bb8bfd78524a88ef701e0b790483fd06c76862 = 0x514; // float
	inline uint64_t o_0cecf259d9f6300994b63fe9c1ede5f6404cb51d = 0x518; // bool
	inline uint64_t oFallDamageEffect = 0x520; // GameObjectRef
	inline uint64_t oDrownEffect = 0x528; // GameObjectRef
	inline uint64_t oPlayerFlags = 0x530; // BasePlayer.PlayerFlags
	inline uint64_t o_b8f1cf3ce6d33c780c29ad5d1c7d5f0ab7c9bc3a = 0x538; // Action<BasePlayer>
	inline uint64_t o_24bfd04a4866f676833b05781b451cf2728e7c39 = 0x540; // string
	inline uint64_t o_225acad5c6d38e9a75e2917b631072301f3ab4a8 = 0x548; // %59ccfc9d9e0c144437896f3e0810b9f986b21d81
	inline uint64_t o_513c499130cbec15f81d96e85f9ecbe5cf7da82f = 0x550; // PlayerModel
	inline uint64_t o_1bb7d2dcfd202297b945a8aec82fd8cca642fcb2 = 0x558; // WaterBody
	inline uint64_t o_d895911c5367f388e071fc8af40b2b02bd3cde74 = 0x560; // %b7c1b2767a5a3630988a604805fbdd852377395b
	inline uint64_t oPlayerInput = 0x568; // PlayerInput
	inline uint64_t o_4dd71d02ead776cab365eeaa2e4a28f0651af6f7 = 0x570; // Action<BasePlayer>
	inline uint64_t o_c18a33bb43b5e7d355a5a934fae61095ee88ab5c = 0x578; // BasePlayer.%53f959bd39f4d576efce5e364d70cdd24c474f6e<ulong>
	inline uint64_t o_18f92c75e038fc66a2b6f3d244e409717547ecdb = 0x588; // PlayerVoiceRecorder
	inline uint64_t o_035a2455def8ee8c2f0f2e0256e663c4feac4f26 = 0x590; // int
	inline uint64_t o_344c7c5989b67b81747a3112d4a36b1395aac49a = 0x594; // int
	inline uint64_t o_64d8140da965b8696e334847a6d76f5ddc4c48bc = 0x598; // Action<BasePlayer>
	inline uint64_t o_ef376522237c51d721305f90583dd594c8ce684e = 0x5A0; // ProtectionProperties
	inline uint64_t o_eabcac88fa5a14cd7241b5a465ae142b8cade060 = 0x5A8; // BasePlayer.CapsuleColliderInfo
	inline uint64_t o_96c7dee6686eb746e9dc92976bae12fe873de0a9 = 0x5BC; // BasePlayer.CapsuleColliderInfo
	inline uint64_t o_991cab41c03d0cfd12ce38ac9d51a4077249d56e = 0x5D0; // BasePlayer.CapsuleColliderInfo
	inline uint64_t o_af0400df0c65c3047ce7906aef325b134f887ee6 = 0x5E4; // BasePlayer.CapsuleColliderInfo
	inline uint64_t o_140f452106bddee1a3a323ae12c8611652b5c03d = 0x5F8; // Stopwatch
	inline uint64_t o_152eee9e5f702cdfb1f9af05a5d48e3bd976f4e1 = 0x600; // float
	inline uint64_t o_0aca10459ce281185ab6ebaa1af2a65508669351 = 0x604; // float
	inline uint64_t oWeaponMoveSpeedScale = 0x608; // float
	inline uint64_t oClothingBlocksAiming = 0x60C; // bool
	inline uint64_t oClothingMoveSpeedReduction = 0x610; // float
	inline uint64_t oClothingWaterSpeedBonus = 0x614; // float
	inline uint64_t oClothingAccuracyBonus = 0x618; // float
	inline uint64_t oEquippingBlocked = 0x61C; // bool
	inline uint64_t oEggVision = 0x620; // float
	inline uint64_t o_46f4c12863855cf7082bac79de3c91d5cb63d628 = 0x628; // %d82b478550c39fc4aa07454fac03e435b066dfb7
	inline uint64_t oDesigningAIEntity = 0x630; // BaseEntity
}
namespace oBaseMovement {
	inline uint64_t o_3ef96e1d092c3650ac505cb2817a6726daa00967 = 0x20; // bool
	inline uint64_t o_88922688d877cf6a8730e384bfcf5d4f62be2127 = 0x24; // float
	inline uint64_t o_092eaa86028ad838635fb71dac15f175ebc97c52 = 0x28; // BasePlayer
	inline uint64_t o_3dc268aca373789be958a3204dcef0dcdf95000f = 0x30; // Vector3
	inline uint64_t o_c25b506187850e072fa5671a7a306b14d42454f1 = 0x3C; // Vector3
	inline uint64_t oSprinting = 0x48; // float
	inline uint64_t o_0d71cef9c93be7a3981188899e3ba3c6064da9b3 = 0x4C; // float
	inline uint64_t o_7e8dcbd975aa074494ed7f8792fac48f6c959352 = 0x50; // float
	inline uint64_t oGrounded = 0x54; // float
	inline uint64_t o_93bb2376367e9d141115e6d306ebfa09ec19a8c0 = 0x58; // float
}
namespace oPlayerWalkMovement {
	inline uint64_t oZeroFrictionMaterial = 0x60; // PhysicMaterial
	inline uint64_t oHighFrictionMaterial = 0x68; // PhysicMaterial
	inline uint64_t oCapsuleHeight = 0x70; // float
	inline uint64_t oCapsuleCenter = 0x74; // float
	inline uint64_t oCapsuleHeightDucked = 0x78; // float
	inline uint64_t oCapsuleCenterDucked = 0x7C; // float
	inline uint64_t oCapsuleHeightCrawling = 0x80; // float
	inline uint64_t oCapsuleCenterCrawling = 0x84; // float
	inline uint64_t oGravityTestRadius = 0x88; // float
	inline uint64_t oGravityMultiplier = 0x8C; // float
	inline uint64_t oGravityMultiplierSwimming = 0x90; // float
	inline uint64_t oMaxAngleWalking = 0x94; // float
	inline uint64_t oMaxAngleClimbing = 0x98; // float
	inline uint64_t oMaxAngleSliding = 0x9C; // float
	inline uint64_t oMaxStepHeight = 0xA0; // float
	inline uint64_t o_20ba68a4d0d68ef1f9e15ef17e090e7102e7e448 = 0xA8; // TriggerLadder
	inline uint64_t o_9ceff4b66d397a88e0b4d95b30b2f20bf05368a0 = 0xB0; // CollisionDetectionMode
	inline uint64_t o_1682c0a3b7b4ac925dbda23b10f8415b806e2cd6 = 0xB8; // Rigidbody
	inline uint64_t o_d00ad490cafb7ec4dba880dba2fd95ce1c206de0 = 0xC0; // CapsuleCollider
	inline uint64_t o_67b0e9108795e4d4cad1d0e4d579296e885ce9d9 = 0xC8; // float
	inline uint64_t oGroundAngle = 0xCC; // PlayerWalkMovement.%53f959bd39f4d576efce5e364d70cdd24c474f6e<float>
	inline uint64_t oGroundAngleNew = 0xD4; // PlayerWalkMovement.%53f959bd39f4d576efce5e364d70cdd24c474f6e<float>
	inline uint64_t oGroundTime = 0xDC; // float
	inline uint64_t oJumpTime = 0xE0; // float
	inline uint64_t oLandTime = 0xE4; // float
	inline uint64_t o_986c93dd1a00d90e43563cf3b2873a1532a6d9f2 = 0xE8; // Vector3
	inline uint64_t o_77b0d5e04821ba7c9a2110fbef007b435280643b = 0xF4; // Vector3
	inline uint64_t o_ac3b9056614a5174134b8b7e6d343084f74b0a5f = 0x100; // Vector3
	inline uint64_t o_c3e1bc0d28144473ee606c403179d56cf728e797 = 0x10C; // Vector3
	inline uint64_t o_ea4c3d2744bd8e15f854bad4a9c56c29cb71ab1f = 0x118; // Vector3
	inline uint64_t o_88219970d3e7ecc51808ff392817a23d9ccdb87a = 0x124; // Vector3
	inline uint64_t o_5739e55798214263c00247118916f69f219d6e22 = 0x130; // Vector3
	inline uint64_t o_2492de55e6767410e7924d9cb0cf48b3aa8c7bf6 = 0x13C; // float
	inline uint64_t o_a6475e1cff290124df4c7c78a3e480b8fccc3465 = 0x140; // float
	inline uint64_t o_45790e71167a8731d176349505b8cd3be278815b = 0x144; // bool
	inline uint64_t o_e22156cb79e1bbdcdf7e2c34309d592df9a028cd = 0x148; // %0c87048e75a57ffb47683e511abb5fbece900915
	inline uint64_t o_ad44200b20d29f2d8bb86aadd12e9ac6f34c2f23 = 0x14C; // BaseEntity.MovementModify
	inline uint64_t oGrounded = 0x150; // bool
	inline uint64_t o_3edd7e35ef0836689a5692b5eeccfc4483d59653 = 0x151; // bool
	inline uint64_t o_3eea2987bd51e6cb960213c6fd8634954ed6df06 = 0x152; // bool
	inline uint64_t o_b84eca4a5b553700e5646dce9e5114d174258718 = 0x153; // bool
	inline uint64_t o_f1310473419be8025b927ec5a2328e5536267fdd = 0x154; // bool
	inline uint64_t o_776cb04c31226f8cfbc84281d6ca3361c420f27c = 0x155; // bool
	inline uint64_t o_f77975d0b054a79f0232094604217888ae79f108 = 0x156; // bool
	inline uint64_t o_003f98cd374e73279dd6cbeb18068d7e09cf1ef9 = 0x157; // bool
	inline uint64_t o_3558d58604012f6ba9269840a0d191c8052d94d8 = 0x158; // bool
	inline uint64_t o_d1b9fb0fcf11969dc00b2421d2a84368a58b95fd = 0x159; // bool
	inline uint64_t o_03a1b05272420d37e59de5ec583c7dc4a7058bf7 = 0x15A; // bool
	inline uint64_t o_afc1a9be24f1cc2e267d80283f20fa5964e8396b = 0x15C; // float
}
namespace oItemDefinition {
	inline uint64_t oItemid = 0x20; // int
	inline uint64_t oShortname = 0x28; // string
	inline uint64_t oDisplayName = 0x30; // %3f2a32b7027912c27798ed3adb4da2c7ef4345fb.Phrase
	inline uint64_t oDisplayDescription = 0x38; // %3f2a32b7027912c27798ed3adb4da2c7ef4345fb.Phrase
	inline uint64_t oIconSprite = 0x40; // Sprite
	inline uint64_t oCategory = 0x48; // ItemCategory
	inline uint64_t oSelectionPanel = 0x4C; // ItemSelectionPanel
	inline uint64_t oMaxDraggable = 0x50; // int
	inline uint64_t oItemType = 0x54; // %cfed0b3e85684a2d3d99fc277313b0b85c940a76.ContentsType
	inline uint64_t oAmountType = 0x58; // ItemDefinition.AmountType
	inline uint64_t oOccupySlots = 0x5C; // ItemSlot
	inline uint64_t oStackable = 0x60; // int
	inline uint64_t oVolume = 0x64; // int
	inline uint64_t oBaseRadioactivity = 0x68; // float
	inline uint64_t oQuickDespawn = 0x6C; // bool
	inline uint64_t oBlockStealingInSafeZone = 0x6D; // bool
	inline uint64_t oTutorialAllowance = 0x70; // BasePlayer.TutorialItemAllowance
	inline uint64_t oRarity = 0x74; // Rarity
	inline uint64_t oDespawnRarity = 0x78; // Rarity
	inline uint64_t oSpawnAsBlueprint = 0x7C; // bool
	inline uint64_t oInventoryGrabSound = 0x80; // SoundDefinition
	inline uint64_t oInventoryDropSound = 0x88; // SoundDefinition
	inline uint64_t oPhysImpactSoundDef = 0x90; // SoundDefinition
	inline uint64_t oCondition = 0x98; // ItemDefinition.Condition
	inline uint64_t oHidden = 0xB0; // bool
	inline uint64_t oFlags = 0xB4; // ItemDefinition.Flag
	inline uint64_t oHideSelectedPanel = 0xB8; // bool
	inline uint64_t oSteamItem = 0xC0; // SteamInventoryItem
	inline uint64_t oSteamDlc = 0xC8; // SteamDLCItem
	inline uint64_t oParent = 0xD0; // ItemDefinition
	inline uint64_t oWorldModelPrefab = 0xD8; // GameObjectRef
	inline uint64_t oWorldModelOverrides = 0xE0; // ItemDefinition.OverrideWorldModel[]
	inline uint64_t oTreatAsComponentForRepairs = 0xE8; // bool
	inline uint64_t oAlignWorldModelOnDrop = 0xE9; // bool
	inline uint64_t oWorldModelDropOffset = 0xEC; // Vector3
	inline uint64_t oIsRedirectOf = 0xF8; // ItemDefinition
	inline uint64_t oRedirectVendingBehaviour = 0x100; // ItemDefinition.RedirectVendingBehaviour
	inline uint64_t o_46d348a7053bbe7a716d08ed6468a61c84583a7a = 0x108; // ItemModWearable
	inline uint64_t oTraits = 0x110; // BaseEntity.TraitFlag
	inline uint64_t o_5afde06ef6ef6f7a3a5a7d6a69d63a59a35fe741 = 0x118; // ItemMod[]
	inline uint64_t o_c1d382a7bc428bb4049f88afaa283ef407c5e4aa = 0x120; // ItemModBurnable
	inline uint64_t oPanel = 0x128; // GameObject
	inline uint64_t o_491f8b5dba15aa4dc38a99efd1a8f85acfd8b3fd = 0x130; // ItemModCookable
	inline uint64_t o_435a6f4c2dbd5063ebc1669da6032e0772bc2e4e = 0x138; // ItemDefinition[]
	inline uint64_t o_2d5b2985e1e59d5ee7a03ce46afc36e849929931 = 0x140; // %d83feef8ab4a43487c096981b46b6adc662945ec[]
	inline uint64_t o_bf4cb19ea00ea992f4560abfcbe252936811495a = 0x148; // bool
	inline uint64_t o_d23b7cd209af7be57d53d743410322ca998a5bf2 = 0x149; // bool
	inline uint64_t o_907f406604d828ea6ed512fbd8c53d176b7b87b6 = 0x14A; // bool
	inline uint64_t o_80093c9834ef8dea6b48d8d87d820d4a20c32344 = 0x150; // ItemSkinDirectory.Skin[]
}
namespace oPlayerInput {
	inline uint64_t o_aad3a5d5982f40a0383294463af81fd199b5969c = 0x28; // %7b992097a3c9d9bfb190d8148c2ef002403c6110
	inline uint64_t o_d741115b7e8bea3ead3d6e10a56ebf90632ec342 = 0x30; // bool
	inline uint64_t oBodyRotation = 0x34; // Quaternion
	inline uint64_t oViewAngles = 0x44; // Vector3 (this says Vector3 but in cheat engine you can tell that only 0x44 and 0x48 control x & y of camera)
	inline uint64_t o_16f79849c272634660a5476ed1d29aeb42db1f41 = 0x50; // Vector3
	inline uint64_t o_37e4d15d4f83fc4860150859b0f178313b601a5f = 0x5C; // bool
	inline uint64_t o_1644feaf4f314d88cb012cbdad19489e97357e14 = 0x60; // float
	inline uint64_t o_94f51c058d8e387a624673ed8d47a8aa187db45d = 0x64; // Quaternion
	inline uint64_t o_e253bd89732078a0f3941002d139abbec5c5e30c = 0x74; // Vector3
	inline uint64_t o_ae87fd03b6993ea44ac71fcb67da618ad0e2cc40 = 0x80; // PlayerInput.%53f959bd39f4d576efce5e364d70cdd24c474f6e<Vector3>
	inline uint64_t o_72f06137eaa0826000a06cc3bebfd2f0c38a93d3 = 0x90; // Vector2
	inline uint64_t o_09df43e424894bea2f476225b45092bd31c0b71a = 0x98; // float
	inline uint64_t o_c32209562083043fb41b327e5f55f1b2bedc30fd = 0x9C; // int
	inline uint64_t o_10e256f0a836324b4f65e170414581c6ed35f2b0 = 0xA0; // int
	inline uint64_t o_3489fb515392f2d9f81eaf991c6d5878e1d7b081 = 0xA4; // bool
	inline uint64_t o_e305327fe67715a0e3a91cb8a3abb4f0eb91b928 = 0xA5; // bool
	inline uint64_t o_a4f8b0107b11b19e034a696feb4374967509fb10 = 0xA6; // bool
	inline uint64_t o_4d2ed0d2f8f3d834aaf1b4da9f152cf931219ddd = 0xA8; // %b5cdf617a710a9301118c0e6b03f039209c8cf3c
	inline uint64_t o_ee4ac3f64ebd4ed68544eefc18c8829e3207e155 = 0xB0; // Vector3
	inline uint64_t o_4c1cfcf1ad4eeec00751117856ab65c43f0c9133 = 0xBC; // Vector3
	inline uint64_t o_2afa3961f8af5fb00dc4c6c58dce31a113653331 = 0xC8; // int
	inline uint64_t o_cd00234dd6711a2f246283cc0d18646db58728e2 = 0xCC; // bool
}
namespace oBaseMountable {
	inline uint64_t o_11909b4aa1a886a72589b0b7ea20859a3dace72b = 0x230; // Action<BasePlayer>
	inline uint64_t o_2888f5b6f42806c01bdcad7e1738f275c322f18c = 0x238; // Action<BasePlayer>
	inline uint64_t oEyePositionOverride = 0x240; // Transform
	inline uint64_t oEyeCenterOverride = 0x248; // Transform
	inline uint64_t oPitchClamp = 0x250; // Vector2
	inline uint64_t oYawClamp = 0x258; // Vector2
	inline uint64_t oCanWieldItems = 0x260; // bool
	inline uint64_t oRelativeViewAngles = 0x261; // bool
	inline uint64_t oAllowForceMountWhenRestrained = 0x262; // bool
	inline uint64_t oMountAnchor = 0x268; // Transform
	inline uint64_t oMountLOSVertOffset = 0x270; // float
	inline uint64_t oMountPose = 0x274; // PlayerModel.MountPoses
	inline uint64_t oMaxMountDistance = 0x278; // float
	inline uint64_t oDismountPositions = 0x280; // Transform[]
	inline uint64_t oCheckPlayerLosOnMount = 0x288; // bool
	inline uint64_t oDisableMeshCullingForPlayers = 0x289; // bool
	inline uint64_t oAllowHeadLook = 0x28A; // bool
	inline uint64_t oIgnoreVehicleParent = 0x28B; // bool
	inline uint64_t oLegacyDismount = 0x28C; // bool
	inline uint64_t oWearWhileMounted = 0x290; // ItemModWearable
	inline uint64_t oModifiesPlayerCollider = 0x298; // bool
	inline uint64_t oCustomPlayerCollider = 0x29C; // BasePlayer.CapsuleColliderInfo
	inline uint64_t oClippingCheckRadius = 0x2B0; // float
	inline uint64_t oClippingAndVisChecks = 0x2B4; // bool
	inline uint64_t oClippingChecksLocation = 0x2B8; // BaseMountable.ClippingCheckLocation
	inline uint64_t oMountSoundDef = 0x2C0; // SoundDefinition
	inline uint64_t oSwapSoundDef = 0x2C8; // SoundDefinition
	inline uint64_t oDismountSoundDef = 0x2D0; // SoundDefinition
	inline uint64_t oDismountHoldType = 0x2D8; // BaseMountable.DismountConvarType
	inline uint64_t oMountTimeStatType = 0x2DC; // BaseMountable.MountStatType
	inline uint64_t oAllowedGestures = 0x2E0; // BaseMountable.MountGestureType
	inline uint64_t oCanDrinkWhileMounted = 0x2E4; // bool
	inline uint64_t oAllowSleeperMounting = 0x2E5; // bool
	inline uint64_t oAnimateClothInLocalSpace = 0x2E6; // bool
	inline uint64_t oMountedCameraMode = 0x2E8; // BasePlayer.CameraMode
	inline uint64_t oRigidBody = 0x2F0; // Rigidbody
	inline uint64_t oIsMobile = 0x2F8; // bool
	inline uint64_t oSideLeanAmount = 0x2FC; // float
}
namespace oBaseProjectile {
	inline uint64_t oNoiseRadius = 0x2B8; // float
	inline uint64_t oDamageScale = 0x2BC; // float
	inline uint64_t oDistanceScale = 0x2C0; // float
	inline uint64_t oProjectileVelocityScale = 0x2C4; // float
	inline uint64_t oAutomatic = 0x2C8; // bool
	inline uint64_t oUsableByTurret = 0x2C9; // bool
	inline uint64_t oTurretDamageScale = 0x2CC; // float
	inline uint64_t oAttackFX = 0x2D0; // GameObjectRef
	inline uint64_t oSilencedAttack = 0x2D8; // GameObjectRef
	inline uint64_t oMuzzleBrakeAttack = 0x2E0; // GameObjectRef
	inline uint64_t oFireModeSound = 0x2E8; // SoundDefinition
	inline uint64_t oMuzzlePoint = 0x2F0; // Transform
	inline uint64_t oReloadTime = 0x2F8; // float
	inline uint64_t oCanUnloadAmmo = 0x2FC; // bool
	inline uint64_t oPrimaryMagazine = 0x300; // BaseProjectile.Magazine
	inline uint64_t oFractionalReload = 0x308; // bool
	inline uint64_t oReloadStartDuration = 0x30C; // float
	inline uint64_t oReloadFractionDuration = 0x310; // float
	inline uint64_t oReloadEndDuration = 0x314; // float
	inline uint64_t oAlternateDryFireRate = 0x318; // float
	inline uint64_t oAimSway = 0x31C; // float
	inline uint64_t oAimSwaySpeed = 0x320; // float
	inline uint64_t oRecoil = 0x328; // RecoilProperties
	inline uint64_t oAimconeCurve = 0x330; // AnimationCurve
	inline uint64_t oAimCone = 0x338; // float
	inline uint64_t oHipAimCone = 0x33C; // float
	inline uint64_t oAimconePenaltyPerShot = 0x340; // float
	inline uint64_t oAimConePenaltyMax = 0x344; // float
	inline uint64_t oAimconePenaltyRecoverTime = 0x348; // float
	inline uint64_t oAimconePenaltyRecoverDelay = 0x34C; // float
	inline uint64_t oStancePenaltyScale = 0x350; // float
	inline uint64_t oHasADS = 0x354; // bool
	inline uint64_t oNoAimingWhileCycling = 0x355; // bool
	inline uint64_t oManualCycle = 0x356; // bool
	inline uint64_t o_45d5a4e56d414abb9bae47218f31ec5e890bbe53 = 0x357; // bool
	inline uint64_t o_8d01fa8fe0ada937693b7ca31186c39de4076e70 = 0x358; // bool
	inline uint64_t oAiming = 0x359; // bool (found in cheat engine by aiming and watching)
	inline uint64_t oUseEmptyAmmoState = 0x35A; // bool
	inline uint64_t oIsBurstWeapon = 0x35B; // bool
	inline uint64_t oCanChangeFireModes = 0x35C; // bool
	inline uint64_t oDefaultOn = 0x35D; // bool
	inline uint64_t oInternalBurstRecoilScale = 0x360; // float
	inline uint64_t oInternalBurstFireRateScale = 0x364; // float
	inline uint64_t oInternalBurstAimConeScale = 0x368; // float
	inline uint64_t oResetDuration = 0x36C; // float
	inline uint64_t oNumShotsFired = 0x370; // int
	inline uint64_t o_2c51d7192f06da8f00f7de1fa60c17ed7716ad9b = 0x374; // BaseProjectile.%53f959bd39f4d576efce5e364d70cdd24c474f6e<float>
	inline uint64_t o_7bb92e57fca97af26374c95f5a1326d2de1a4b20 = 0x37C; // BaseProjectile.%53f959bd39f4d576efce5e364d70cdd24c474f6e<float>
	inline uint64_t o_bf55427e9361ac09d7d4195a28e9e7b42c7bc2c2 = 0x384; // float
	inline uint64_t o_c64e199deee4317b8175e7ba974b368d49f41775 = 0x388; // float
	inline uint64_t o_bf87488ae733c761d26b649f3152bc23791e9373 = 0x38C; // uint
	inline uint64_t o_b541dbf61707aab3c91d49bdc6b18bb83a089931 = 0x390; // float
	inline uint64_t o_baa5d79e9895ab62e0fb7dcf3bc40e52240640c5 = 0x394; // float
	inline uint64_t o_2d1ae942e01ed3380f69233dbd8f50b1230d5dd1 = 0x398; // float
	inline uint64_t o_8267efd326d09076293686758fece607d136bc3e = 0x39C; // float
	inline uint64_t oReloading = 0x3A0; // bool (found in cheat engine by reloading and watching)
	inline uint64_t o_95ab0fa4f3674dc63313ddd50e566290df3d39f9 = 0x3A4; // %0c87048e75a57ffb47683e511abb5fbece900915
	inline uint64_t o_f924afde942b4e77f2a22540b2541e2d54275744 = 0x3A8; // float
	inline uint64_t o_fea8062803c34848e5459c39e9237ce25e3120bc = 0x3AC; // BaseProjectile.%53f959bd39f4d576efce5e364d70cdd24c474f6e<float>
	inline uint64_t o_6af914bc59dccf513503022cf6bdcbbb7207f180 = 0x3B4; // float
	inline uint64_t o_a7cea89d4eb4750663a9c72420280cc09c773aff = 0x3B8; // ItemDefinition
	inline uint64_t o_54208a81a1aa5a6e897d71e5fcb9eb35b02aeb8c = 0x3C0; // int
	inline uint64_t o_c675de86fd304ea12cc7c6d4c2f6bbbf69dc3d93 = 0x3C4; // int
	inline uint64_t o_62c646d8e4e38c8df66cdf04197448e7c98ba803 = 0x3C8; // int
	inline uint64_t o_2d183d84c6aa82dea1043f555891c40db220520c = 0x3CC; // bool
}
namespace oPlayerEyes {
	inline uint64_t oThirdPersonSleepingOffset = 0x28; // Vector3
	inline uint64_t oDefaultLazyAim = 0x38; // LazyAimProperties
	inline uint64_t o_c000d6a9aed121480912c43430230a56a8c2bb98 = 0x40; // PlayerEyes.%53f959bd39f4d576efce5e364d70cdd24c474f6e<Vector3>
	inline uint64_t o_811f850c86db52bdfc47652558564a98e3facafd = 0x50; // Quaternion
	inline uint64_t oViewOffset = 0x60; // Vector3
	inline uint64_t o_72f06043172bd2f6ff5f62cbfb587d2da98be97c = 0x6C; // Quaternion
	inline uint64_t o_d30b7f74bfba6aa1877ff4b0268b68e0034b8403 = 0x7C; // Quaternion
	inline uint64_t o_b8183c9380e50689bfd522cf0c6f5a33621251cf = 0x8C; // float
	inline uint64_t o_9945da4db4d75a576204873cf324bfd7642b8e62 = 0x90; // bool
}

namespace oModelState {
	inline uint64_t oWaterLevel = 0x44; // float
	inline uint64_t oFlags = 0x54; // int
}
namespace oItem {
	inline uint64_t oItemDefinition = 0x18;
	inline uint64_t oBaseProjectile = 0x78;
}